#!/usr/bin/env ruby

require 'celluloid'
require 'cooperator'
require 'nokogiri'
require 'open-uri'

module Hoard
  class Page
    include Celluloid

    def process(number, description, source, destination)
      `curl -sS -o #{destination.inspect} #{source.inspect}`

      puts description

      description
    end
  end

  def self.MangaFox(context = {})
    MangaFox::GrabManga.perform context
  end

  module MangaFox
    class GrabManga
      prepend Cooperator

      def perform
        cooperate GetTitleAndChapters,
                  LimitChapters,
                  GrabChapters
      end
    end

    class GetTitleAndChapters
      prepend Cooperator

      def perform
        html = Nokogiri::HTML open "http://mangafox.me/manga/#{context.name}/"

        title! html
        chapters! html
      end

      private

      def title!(html)
        title = html.title
        title.gsub!(/ Manga .*$/, '')

        context.title = title
      end

      def chapters!(html)
        chapters = {}

        matches = html.css 'a.tips'
        matches.reverse.each do |match|
          href = match['href']

          location = href.gsub(/\/1\.html$/, '')
          volume, chapter = /\/v(.*?)\/c(.*?)\/1\.html$/.match(href) { |m| [m[1], m[2]] }
          index = [volume, chapter].join '-'

          chapters[index] = {
            chapter: chapter,
            volume: volume,
            location: location
          }
        end

        context.chapters = chapters
      end
    end

    class LimitChapters
      prepend Cooperator

      def perform
        context.chapters.select! do |index, chapter|
          context.volume.match chapter[:volume] and context.chapter.match chapter[:chapter]
        end
      end
    end

    class GrabChapters
      prepend Cooperator

      def selector
        'img#image'
      end

      def attribute
        'src'
      end

      def perform
        context.chapters.each do |index, chapter|
          html = Nokogiri::HTML open "#{chapter[:location]}/1.html"

          title = html.css("meta[property='og:description']").first['content']
          title = if title =~ /(.*?: )/
            title.gsub /(.*?: )/, ''
          else
            nil
          end

          source = html.css(selector).first[attribute]

          html.css('.r.m .l select').first.css('option').each do |option|
            page = "%03d" % option['value']

            next if page == '000'

            description = [
              context.title,
              index,
              page,
              title
            ].compact.join ' - '

            location = "#{chapter[:location]}/#{page}.html"
            directory = File.join 'Manga', context.title, [index, title].compact.join(' ')
            destination = File.join directory, "#{page}.jpg"

            prepare! directory

            FUTURES << PAGES.future.process(page, description, source.gsub(/\/1\.jpg$/, "/#{chapter[:chapter]}.jpg"), destination)
          end
        end
      end

      private

      def prepare!(directory)
        FileUtils.mkdir_p directory
      end
    end
  end
end

PAGES = Hoard::Page.pool size: 10
FUTURES = []

name = ARGV[0]
volume = Regexp.new ARGV[1]
chapter = Regexp.new ARGV[2]

Hoard.MangaFox name: name, volume: volume, chapter: chapter

FUTURES.each do |future|
  future.value
end
